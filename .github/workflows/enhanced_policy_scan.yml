name: Enhanced Policy Compliance Scan

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - main
  schedule:
    - cron: '0 2 * * 1'  # Run weekly on Mondays at 2 AM

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: 🔒 Security Policy Scan
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better scanning

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements-dev.txt --no-deps

      - name: Run Enhanced Policy Scanner
        run: |
          python src/enhanced_cli.py scan . --format json --output security_report
        continue-on-error: true

      - name: Run Advanced Security Scanner
        run: |
          python src/advanced_scanner.py
        continue-on-error: true

      - name: Generate Security Summary
        run: |
          python -c "
          import json
          try:
              with open('security_report.json', 'r') as f:
                  data = json.load(f)
              print(f'Policy Compliance: {len([r for r in data if r[\"compliant\"]])}/{len(data)} policies passed')
          except:
              print('No policy report found')
          "

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: |
            security_report.json
            security_report.html
            *.json
            *.html

  dependency-scan:
    runs-on: ubuntu-latest
    name: 📦 Dependency Vulnerability Scan
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Security Tools
        run: |
          pip install safety bandit semgrep

      - name: Run Safety Check
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run Bandit Security Scan
        run: |
          bandit -r . -f json -o bandit-report.json
        continue-on-error: true

      - name: Run Semgrep
        run: |
          semgrep ci --json --output semgrep-report.json
        continue-on-error: true

      - name: Upload Dependency Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-reports
          path: |
            safety-report.json
            bandit-report.json
            semgrep-report.json

  code-quality:
    runs-on: ubuntu-latest
    name: 🔍 Code Quality Analysis
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements-dev.txt --no-deps

      - name: Download Dependency Reports
        uses: actions/download-artifact@v4
        with:
          name: dependency-reports
          path: ./reports

      - name: Run Code Quality Checks
        run: |
          black --check --diff src/ || true
          flake8 src/ --max-line-length=120 || true
          mypy src/ --ignore-missing-imports || true
          pylint src/ --output-format=json || true

      - name: Generate Quality Report
        run: |
          echo "Code Quality Analysis Complete" > quality_report.txt
          echo "Black formatting: $(black --check --diff src/ 2>&1 | wc -l) issues" >> quality_report.txt
          echo "Flake8 linting: $(flake8 src/ --max-line-length=120 2>&1 | wc -l) issues" >> quality_report.txt

      - name: Upload Quality Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            quality_report.txt
            reports/

  compliance-report:
    runs-on: ubuntu-latest
    name: 📊 Compliance Report Generation
    needs: [security-scan, dependency-scan, code-quality]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download All Reports
        uses: actions/download-artifact@v4
        with:
          name: security-report
          path: ./security-reports

      - name: Download Dependency Reports
        uses: actions/download-artifact@v4
        with:
          name: dependency-reports
          path: ./dependency-reports

      - name: Download Quality Reports
        uses: actions/download-artifact@v4
        with:
          name: quality-reports
          path: ./quality-reports

      - name: Generate Compliance Summary
        run: |
          echo "# DevSecOps Policy Scanner Compliance Report" > compliance_summary.md
          echo "Generated on: $(date)" >> compliance_summary.md
          echo "" >> compliance_summary.md
          echo "## Security Scan Results" >> compliance_summary.md
          if [ -f "./security-reports/security_report.json" ]; then
            echo "- Security policy scan completed" >> compliance_summary.md
          else
            echo "- Security policy scan failed" >> compliance_summary.md
          fi
          echo "" >> compliance_summary.md
          echo "## Dependency Scan Results" >> compliance_summary.md
          if [ -f "./dependency-reports/safety-report.json" ]; then
            echo "- Dependency vulnerability scan completed" >> compliance_summary.md
          else
            echo "- Dependency vulnerability scan failed" >> compliance_summary.md
          fi
          echo "" >> compliance_summary.md
          echo "## Code Quality Results" >> compliance_summary.md
          if [ -f "./quality-reports/quality_report.txt" ]; then
            echo "- Code quality analysis completed" >> compliance_summary.md
          else
            echo "- Code quality analysis failed" >> compliance_summary.md
          fi

      - name: Upload Compliance Summary
        uses: actions/upload-artifact@v4
        with:
          name: compliance-summary
          path: compliance_summary.md

  notification:
    runs-on: ubuntu-latest
    name: 📢 Notification
    needs: [compliance-report]
    if: always()
    
    steps:
      - name: Download Compliance Summary
        uses: actions/download-artifact@v4
        with:
          name: compliance-summary
          path: ./summary

      - name: Send Notification
        run: |
          if [ -f "./summary/compliance_summary.md" ]; then
            echo "✅ Policy compliance scan completed successfully"
            echo "📊 Summary report generated"
          else
            echo "❌ Policy compliance scan failed"
            exit 1
          fi 